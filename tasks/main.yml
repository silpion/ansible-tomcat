---
# Main list of tasks to be executed.
#
#   Fail the play if it runs on an unsupported platform.
- name: Assert platform is supported
  tags: tomcat
  assert:
    that:
      - ansible_os_family in tomcat_supported_platforms
      - ansible_distribution in tomcat_supported_distributions


- name: Include --check mode detection
  tags: tomcat
  include: "{{ tomcat_path_to_lib_role }}/silpion.lib/tasks/checkmodedetection.yml"

- name: Detect --check mode on initial run
  tags: tomcat
  set_fact:
    tomcat_fact_is_not_initial_check_mode: "{{ true if ((ansible_local|default({})).tomcat is defined or not lib_fact_check_mode) else false }}"


- name: Include version specific configuration
  tags: tomcat
  include: "{{ tomcat_path_to_lib_role }}/silpion.lib/tasks/version-specific-vars.yml"
  vars:
    version: "{{ tomcat_version }}"

- name: Assert version specific configuration
  tags: tomcat
  assert:
    that:
      - tomcat_redis_checksum not in (None, "")

- name: Detect version upgrade
  tags: tomcat
  when:
    - (((ansible_local|default([])).tomcat|default([])).general|default([])).version is defined
    - (((ansible_local|default([])).tomcat|default([])).general|default([])).version != tomcat_version
  set_fact:
    tomcat_fact_upgrade_installation: true

- name: Ensure upgrade policies
  tags: tomcat
  when:
    - not tomcat_service_allow_restart|bool
    - tomcat_fact_upgrade_installation is defined and tomcat_fact_upgrade_installation
  fail:
    msg: "Product version upgrade detected, but service management is prohibited"

# Manage system services
- name: Configure service management
  tags: tomcat
  when: (((ansible_local|default([])).util|default([])).init|default([])).system is defined
  include_vars: "service/{{ ansible_local.util.init.system }}.yml"

- name: Include assets persistency tasks
  tags: tomcat
  include: "{{ tomcat_path_to_lib_role }}/silpion.lib/tasks/datapersistency.yml"
  vars:
    include_tags: tomcat

- name: Include lib get_url
  tags: tomcat
  when: tomcat_fact_is_not_initial_check_mode
  include: "{{ tomcat_path_to_lib_role }}/silpion.lib/tasks/get_url.yml"
  vars:
    url: "{{ tomcat_download_url }}"
    filename: "{{ tomcat_redis_filename }}"
    checksum: "{{ tomcat_redis_checksum }}"

- name: Include lib copy
  tags: tomcat
  when: tomcat_fact_is_not_initial_check_mode
  include: "{{ tomcat_path_to_lib_role }}/silpion.lib/tasks/copy.yml"
  vars:
    filename: "{{ tomcat_redis_filename }}"


- name: Create Tomcat group(s)
  tags: tomcat
  become: true
  with_items: "{{ tomcat_instances }}"
  group:
    state: present
    name: "{{ item.group|default(tomcat_default_user_group) }}"

- name: Create Tomcat user(s)
  tags: tomcat
  become: true
  with_items: "{{ tomcat_instances }}"
  user:
    state: present
    name: "{{ item.user|default(tomcat_default_user_name) }}"
    home: "{{ item.home|default(tomcat_default_user_home) }}"
    group: "{{ item.group|default(tomcat_default_user_group) }}"
    system: "{{ item.system|default(tomcat_default_user_system) }}"
    createhome: true
    comment: "Tomcat service user"


- name: Install catalina home directory
  tags: tomcat
  become: true
  file:
    state: directory
    dest: "{{ tomcat_env_catalina_home }}"
    owner: 0
    group: 0
    mode: 0755

- name: Extract Tomcat installation files to catalina home
  tags: tomcat
  become: true
  command: tar
      -xzf {{ lib_persistent_data_path_remote }}/{{ tomcat_redis_filename }}
      -C {{ tomcat_env_catalina_home }}
      --strip-components 1
  args:
    creates: "{{ tomcat_env_catalina_home }}/lib"

# Tomcat 8.5 is packaged with umask 027 which breaks current paradigm
#   to keep CATALINA_HOME and CATALINA_BASE files separated.
#   Identify all jars in bin/ and lib/ directory and make them accessible
#   to the tomcat service user(s).
- name: Include file system access controls for tomcat >= 8.5
  tags: tomcat
  when:
    - tomcat_version|version_compare("8.5", ">=")
    - tomcat_fact_is_not_initial_check_mode
  with_items:
    - '{{ tomcat_env_catalina_home }}/bin'
    - '{{ tomcat_env_catalina_home }}/lib'
  loop_control:
    loop_var: acl_dir
  include: 8.5-acls.yml


- name: Install instance directories
  tags: tomcat
  become: true
  with_nested:
    - "{{ tomcat_instances }}"
    - "{{ tomcat_instance_dirs }}"
  file:
    state: directory
    dest: "{{ item.0.path|default(tomcat_default_instance_path) }}/{{ item.1 }}"
    owner: "{{ item.0.user|default(tomcat_default_user_name) }}"
    group: "{{ item.0.group|default(tomcat_default_user_group) }}"
    mode: 0755

- name: Register static/unmanaged conf files
  tags: tomcat
  become: true
  register: tomcat_registered_conf_files
  check_mode: false
  changed_when: false
  when: tomcat_fact_is_not_initial_check_mode
#  failed_when: "{{ false if lib_fact_check_mode else omit }}"
  command: ls
      -1
      --ignore=web.xml
      --ignore=server.xml
      --ignore=tomcat-users.xml
      {{ tomcat_env_catalina_home }}/conf

- name: Install static/unmanaged conf files
  tags: tomcat
  become: true
  with_nested:
    - "{{ tomcat_instances }}"
    - "{{ (tomcat_registered_conf_files|default({})).stdout_lines|default([]) }}"
  when: tomcat_fact_is_not_initial_check_mode
  command: install
      --owner {{ item.0.user|default(tomcat_default_user_name) }}
      --group {{ item.0.group|default(tomcat_default_user_group) }}
      --mode 0640
      {{ tomcat_env_catalina_home }}/conf/{{ item.1 }}
      {{ item.0.path|default(tomcat_default_instance_path) }}/conf/{{ item.1 }}
  args:
    creates: "{{ item.0.path|default(tomcat_default_instance_path) }}/conf/{{ item.1 }}"

- name: Install instance tomcat-users.xml
  tags: tomcat
  become: true
  with_items: "{{ tomcat_instances }}"
  register: tomcat_registered_install_tomcatusers_xml
  template:
    src: "{{ item.tomcatusers_xml_template|default(tomcat_default_tomcatusers_xml_template) }}"
    dest: "{{ item.path|default(tomcat_default_instance_path) }}/conf/tomcat-users.xml"
    owner: "{{ item.user|default(tomcat_default_user_name) }}"
    group: "{{ item.group|default(tomcat_default_user_group) }}"
    mode: 0640

- name: Install instance server.xml
  tags: tomcat
  become: true
  with_items: "{{ tomcat_instances }}"
  register: tomcat_registered_install_server_xml
  template:
    src: "{{ item.server_xml_template|default(tomcat_default_server_xml_template) }}"
    dest: "{{ item.path|default(tomcat_default_instance_path) }}/conf/server.xml"
    owner: "{{ item.user|default(tomcat_default_user_name) }}"
    group: "{{ item.group|default(tomcat_default_user_group) }}"
    mode: 0640

- name: Install instance web.xml
  tags: tomcat
  become: true
  with_items: "{{ tomcat_instances }}"
  register: tomcat_registered_install_web_xml
  template:
    src: "{{ item.web_xml_template|default(tomcat_default_web_xml_template) }}"
    dest: "{{ item.path|default(tomcat_default_instance_path) }}/conf/web.xml"
    owner: "{{ item.user|default(tomcat_default_user_name) }}"
    group: "{{ item.group|default(tomcat_default_user_group) }}"
    mode: 0640

#   systemd requires to use separate environment files per instance
- name: Install instance environment files
  tags: tomcat
  become: true
  when:
    - (((ansible_local|default([])).util|default([])).init|default([])).system is defined
    - (((ansible_local|default([])).util|default([])).init|default([])).system == 'systemd'
  with_items: "{{ tomcat_instances }}"
  register: tomcat_registered_install_instance_environment_files
  template:
    src: service_systemd_envfile.j2
    dest: "{{ item.path|default(tomcat_default_instance_path) }}/.systemd.conf"
    owner: "{{ item.user|default(tomcat_default_user_name) }}"
    group: "{{ item.group|default(tomcat_default_user_group) }}"
    mode: 0644

- name: Stop tomcat services
  tags: tomcat
  become: true
  when: tomcat_fact_upgrade_installation is defined and tomcat_fact_upgrade_installation
  with_items: "{{ tomcat_instances }}"
  service:
    state: stopped
    name: "{{ item.service_name|default(tomcat_default_service_name) }}"

#   install a service file for tomcat
#     systemd by default uses a templated service (one unit, many instances)
- name: Install tomcat services
  tags: tomcat
  become: true
  with_items: "{{ tomcat_instances }}"
  register: tomcat_registered_install_tomcat_service
  when: tomcat_fact_is_not_initial_check_mode
  template:
    src: "{{ item.service_template|default(tomcat_default_service_template) }}"
    dest: "{{ tomcat_service_dir }}/{{ item.service_file|default(tomcat_default_service_file) }}"
    owner: 0
    group: 0
    mode: "{{ tomcat_service_file_mode }}"

#   reload systemd if service file(s) have changed
#     suppress warnings from systemd
- name: Reload systemd
  tags: tomcat
  when:
    - tomcat_registered_install_tomcat_service.changed
    - (((ansible_local|default([])).util|default([])).init|default([])).system is defined
    - (((ansible_local|default([])).util|default([])).init|default([])).system == 'systemd'
  become: true
  failed_when: false
  changed_when: false
  command: systemctl daemon-reload

- name: Ensure tomcat service(s)
  tags: tomcat
  become: true
  with_items: "{{ tomcat_instances }}"
  when: tomcat_fact_is_not_initial_check_mode
  service:
    state: started
    enabled: true
    name: "{{ item.service_name|default(tomcat_default_service_name) }}"


#   Beware: Magic here
#     First of: register all instances which might have a changed event in various tasks
#       - instance configuration might have changed (server.xml)
#       - environment files for systemd might have changed
#       - service files might have changed
#     Result here is a dictionary containing the result of set_fact in a loop.
#       Each fact is stored at
#       - tomcat_registered_instances_requiring_restart.results.INDEX.ansible_facts.tomcat_fact_requires_restart_item
#       Values are one of
#       - tomcat service name in question (item.service_name) with sensible default
#       - None
- name: Register instances requiring restart
  tags: tomcat
  register: tomcat_registered_instances_requiring_restart
  with_items:
    - "{{ (tomcat_registered_install_server_xml|default({})).results|default({}) }}"
    - "{{ (tomcat_registered_install_web_xml|default({})).results|default({}) }}"
    - "{{ (tomcat_registered_install_instance_environment_files|default({})).results|default({}) }}"
    - "{{ (tomcat_registered_install_tomcat_service|default({})).results|default({}) }}"
  when: tomcat_fact_is_not_initial_check_mode
  set_fact:
    tomcat_fact_requires_restart_item: "{{ item.item.service_name|default(tomcat_default_service_name) if item.item is defined and item.changed else 'None' }}"

#     This one maps all services in question from previous task into an iterable list
#       while stripping services named 'None'
- name: Configure instances requiring restart
  tags: tomcat
  when: tomcat_fact_is_not_initial_check_mode
  set_fact:
    tomcat_facts_requires_restart: "{{ tomcat_registered_instances_requiring_restart.results|map(attribute='ansible_facts.tomcat_fact_requires_restart_item')|list|unique|difference(['None']) }}"

#     We can now safely notify the service restart handler which in turn just loops
#       over all items in the resulting list 'tomcat_facts_requires_restart'.
- name: Trigger service handler
  tags: tomcat
  notify: service restart tomcat
  command: /bin/true


- name: Include local facts tasks
  tags: tomcat
  when: tomcat_fact_is_not_initial_check_mode
  include: "{{ tomcat_path_to_lib_role }}/silpion.lib/tasks/localfacts.yml"
  vars:
    namespace: tomcat
