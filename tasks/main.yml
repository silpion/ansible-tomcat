---
# Main list of tasks to be executed.
#
#   Fail the play if it runs on an unsupported platform.
- name: Assert platform is supported
  tags: tomcat
  assert:
    that:
      - ansible_os_family in tomcat_supported_platforms
      - ansible_distribution in tomcat_supported_distributions


- name: Load version vars
  tags: tomcat
  with_first_found:
    - ../vars/versions/{{ tomcat_version }}.yml
    - ../vars/versions/default.yml
  include_vars: "{{ item }}"

- name: Assert version vars
  tags: tomcat
  assert:
    that:
      - tomcat_redis_sha256sum not in (None, "")



- name: Include util get/put instructions
  tags: tomcat
  include: util.yml


- name: Create Tomcat group(s)
  tags: tomcat
  become: yes
  with_items: tomcat_instances
  group:
    state=present
    name={{ item.group|default(tomcat_default_user_group) }}

- name: Create Tomcat user(s)
  tags: tomcat
  become: yes
  with_items: tomcat_instances
  user:
    state=present
    name={{ item.user|default(tomcat_default_user_name) }}
    home={{ item.home|default(tomcat_default_user_home) }}
    group={{ item.group|default(tomcat_default_user_group) }}
    createhome=yes
    comment="Tomcat service user"


- name: Install catalina home directory
  tags: tomcat
  become: yes
  file:
    state=directory
    dest={{ tomcat_env_catalina_home }}
    owner=0
    group=0
    mode=0755

- name: Extract Tomcat installation files to catalina home
  tags: tomcat
  become: yes
  command: tar
      -xzf {{ util_persistent_data_path_remote }}/{{ tomcat_redis_filename }}
      -C {{ tomcat_env_catalina_home }}
      --strip-components 1
    creates={{ tomcat_env_catalina_home }}/lib


- name: Install instance directories
  tags: tomcat
  become: yes
  with_nested:
    - tomcat_instances
    - tomcat_instance_dirs
  file:
    state=directory
    dest={{ item.0.path|default(tomcat_default_instance_path) }}/catalina/{{ item.0.name }}/{{ item.1 }}
    owner={{ item.0.user|default(tomcat_default_user_name) }}
    group={{ item.0.group|default(tomcat_default_user_group) }}
    mode=0755

- name: Register conf files
  tags: tomcat
  register: tomcat_registered_conf_files
  changed_when: false
  command: ls -1 --ignore=server.xml {{ tomcat_env_catalina_home }}/conf

- name: Install conf files
  tags: tomcat
  become: yes
  with_nested:
    - tomcat_instances
    - tomcat_registered_conf_files.stdout_lines
  command: install
      --owner {{ item.0.user|default(tomcat_default_user_name) }}
      --group {{ item.0.group|default(tomcat_default_user_group) }}
      --mode 0640
      {{ tomcat_env_catalina_home }}/conf/{{ item.1 }}
      {{ item.0.path|default(tomcat_default_instance_path) }}/catalina/{{ item.0.name }}/conf/{{ item.1 }}
    creates={{ item.0.path|default(tomcat_default_instance_path) }}/catalina/{{ item.0.name }}/conf/{{ item.1 }}


- name: Install instance configurations
  tags: tomcat
  become: yes
  with_items: tomcat_instances
  register: tomcat_registered_install_instance_configurations
  template:
    src={{ item.server_xml_template|default(tomcat_default_server_xml_template) }}
    dest={{ item.path|default(tomcat_default_instance_path) }}/catalina/{{ item.name }}/conf/server.xml
    owner={{ item.user|default(tomcat_default_user_name) }}
    group={{ item.group|default(tomcat_default_user_group) }}
    mode=0640


# Manage system services
- name: Configure service management
  tags: tomcat
  include_vars: "service/{{ ansible_local['util']['init']['system'] }}.yml"

#   systemd requires to use separate environment files per instance
- name: Install instance environment files
  tags: tomcat
  become: yes
  when: ansible_local.util.init.system == 'systemd'
  with_items: tomcat_instances
  register: tomcat_registered_install_instance_environment_files
  template:
    src=service_systemd_envfile.j2
    dest={{ item.path|default(tomcat_default_instance_path) }}/catalina/{{ item.name }}/.systemd.conf
    owner={{ item.user|default(tomcat_default_user_name) }}
    group={{ item.group|default(tomcat_default_user_group) }}
    mode=0644

#   install a service file for tomcat
#     systemd by default uses a templated service (one unit, many instances)
- name: Install tomcat services
  tags: tomcat
  become: yes
  with_items: tomcat_instances
  register: tomcat_registered_install_tomcat_service
  template:
    src={{ item.service_template|default(tomcat_default_service_template) }}
    dest={{ tomcat_service_dir }}/{{ item.service_file|default(tomcat_default_service_file) }}
    owner=0
    group=0
    mode={{ tomcat_service_file_mode }}

#   reload systemd if service file(s) have changed
#     suppress warnings from systemd
- name: Reload systemd
  tags: tomcat
  when: tomcat_registered_install_tomcat_service.changed and ansible_local.util.init.system == 'systemd'
  become: yes
  failed_when: false
  changed_when: false
  command: systemctl daemon-reload

- name: Ensure tomcat service(s)
  tags: tomcat
  become: yes
  with_items: tomcat_instances
  service:
    state=started
    enabled=true
    name={{ item.service_name|default(tomcat_default_service_name) }}


#   Beware: Magic here
#     First of: register all instances which might have a changed event in various tasks
#       - instance configuration might have changed (server.xml)
#       - environment files for systemd might have changed
#       - service files might have changed
#     Result here is a dictionary containing the result of set_fact in a loop.
#       Each fact is stored at
#       - tomcat_registered_instances_requiring_restart.results.INDEX.ansible_facts.tomcat_fact_requires_restart_item
#       Values are one of
#       - tomcat service name in question (item.service_name) with sensible default
#       - None
- name: Register instances requiring restart
  tags: tomcat
  register: tomcat_registered_instances_requiring_restart
  with_items:
    - "{{ tomcat_registered_install_instance_configurations.results }}"
    - "{{ tomcat_registered_install_instance_environment_files.results }}"
    - "{{ tomcat_registered_install_tomcat_service.results }}"
  set_fact:
    tomcat_fact_requires_restart_item={% if item.item is defined and item.changed %}{{ item.item.service_name|default(tomcat_default_service_name) }}{% else %}'None'{% endif %}

#     This one maps all services in question from previous task into an iterable list
#       while stripping services named 'None'
- name: Configure instances requiring restart
  tags: tomcat
  set_fact:
    tomcat_facts_requires_restart="{{ tomcat_registered_instances_requiring_restart.results|map(attribute='ansible_facts.tomcat_fact_requires_restart_item')|list|unique|difference(['None']) }}"

#     We can now safely notify the service restart handler which in turn just loops
#       over all items in the resulting list 'tomcat_facts_requires_restart'.
- name: Trigger service handler
  tags: tomcat
  notify: service restart tomcat
  command: /bin/true


- name: Install local tomcat facts
  tags: tomcat
  become: yes
  register: tomcat_registered_install_local_tomcat_facts
  template:
    src={{ tomcat_facts_template }}
    dest=/etc/ansible/facts.d/tomcat.fact
    owner=0
    group=0
    mode=0644

- name: Re-read local facts
  tags: tomcat
  when: tomcat_registered_install_local_tomcat_facts.changed
  setup:
    filter=ansible_local
